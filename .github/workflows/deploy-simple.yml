name: Deploy Personal Info System POC to AWS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: personal-info-system
  ECS_SERVICE: personal-info-service
  ECS_CLUSTER: personal-info-cluster

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the application
          dotnet publish src/PersonalInfoSystem.sln -c Release -o ./publish
          
          # Create Dockerfile for combined deployment
          cat > Dockerfile << 'EOF'
          FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
          WORKDIR /app
          EXPOSE 80
          EXPOSE 443
          
          FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
          WORKDIR /src
          COPY ["src/PersonalInfoSystem.sln", "."]
          COPY ["src/PersonalInfoApi/PersonalInfoApi.csproj", "PersonalInfoApi/"]
          COPY ["src/PersonalInfoBlazor/PersonalInfoBlazor.csproj", "PersonalInfoBlazor/"]
          COPY ["src/PersonalInfoShared/PersonalInfoShared.csproj", "PersonalInfoShared/"]
          RUN dotnet restore "PersonalInfoSystem.sln"
          COPY src/ .
          WORKDIR "/src/PersonalInfoApi"
          RUN dotnet build "PersonalInfoApi.csproj" -c Release -o /app/build
          
          FROM build AS publish
          RUN dotnet publish "PersonalInfoApi.csproj" -c Release -o /app/publish /p:UseAppHost=false
          
          FROM base AS final
          WORKDIR /app
          COPY --from=publish /app/publish .
          ENTRYPOINT ["dotnet", "PersonalInfoApi.dll"]
          EOF
          
          # Build and push image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      
      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment
      
      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE
      
      - name: Get service endpoint
        run: |
          TASK_ARN=$(aws ecs list-tasks --cluster $ECS_CLUSTER --service-name $ECS_SERVICE --query 'taskArns[0]' --output text)
          PUBLIC_IP=$(aws ecs describe-tasks --cluster $ECS_CLUSTER --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text | xargs -I {} aws ec2 describe-network-interfaces --network-interface-ids {} --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
          echo "ðŸš€ Your Personal Info System is deployed at: http://$PUBLIC_IP:80"
