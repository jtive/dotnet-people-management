name: Deploy Personal Info System to AWS App Runner

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: personal-info-system
  APP_RUNNER_SERVICE: personal-info-system
  API_PROJECT_PATH: src/PersonalInfoApi

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION
      
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build and push image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      
      - name: Create or update App Runner service
        run: |
          # Check if service exists
          SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$APP_RUNNER_SERVICE'].ServiceArn" --output text)
          
          if [ -z "$SERVICE_ARN" ]; then
            echo "Service doesn't exist, creating new App Runner service..."
            
            # Create the service using the configuration file
            SERVICE_ARN=$(aws apprunner create-service \
              --service-name "$APP_RUNNER_SERVICE" \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "'$ECR_REGISTRY'/'$ECR_REPOSITORY':latest",
                  "ImageConfiguration": {
                    "Port": "8080",
                    "RuntimeEnvironmentVariables": {
                      "ASPNETCORE_ENVIRONMENT": "Production",
                      "ASPNETCORE_URLS": "http://+:8080"
                    }
                  },
                  "ImageRepositoryType": "ECR"
                },
                "AutoDeploymentsEnabled": true
              }' \
              --instance-configuration '{
                "Cpu": "0.25 vCPU",
                "Memory": "0.5 GB"
              }' \
              --query "Service.ServiceArn" \
              --output text)
            
            echo "Created new service with ARN: $SERVICE_ARN"
          else
            echo "Service exists, starting deployment update..."
            aws apprunner start-deployment --service-arn "$SERVICE_ARN"
          fi
          
          # Store service ARN for later steps
          echo "SERVICE_ARN=$SERVICE_ARN" >> $GITHUB_ENV
      
      - name: Wait for deployment to complete
        run: |
          aws apprunner wait service-deployment-completed --service-arn $SERVICE_ARN
      
      - name: Get service URL
        id: get-url
        run: |
          SERVICE_URL=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query "Service.ServiceUrl" --output text)
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "🚀 Your Personal Info System is deployed at: $SERVICE_URL"
      
      - name: Test deployment
        run: |
          SERVICE_URL=${{ steps.get-url.outputs.service_url }}
          echo "Testing deployment at: $SERVICE_URL"
          
          # Wait a bit for the service to be fully ready
          sleep 30
          
          # Test health endpoint
          curl -f "$SERVICE_URL/api/health" || echo "⚠️ Health check failed"
          
          # Test main page
          curl -f "$SERVICE_URL" || echo "⚠️ Main page check failed"
      
      - name: Create deployment summary
        run: |
          SERVICE_URL=${{ steps.get-url.outputs.service_url }}
          echo "## 🚀 Personal Info System Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Service URL:** [$SERVICE_URL]($SERVICE_URL)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Available Endpoints:**" >> $GITHUB_STEP_SUMMARY
          echo "- Health Check: \`$SERVICE_URL/api/health\`" >> $GITHUB_STEP_SUMMARY
          echo "- Persons: \`$SERVICE_URL/api/person\`" >> $GITHUB_STEP_SUMMARY
          echo "- Addresses: \`$SERVICE_URL/api/address\`" >> $GITHUB_STEP_SUMMARY
          echo "- Credit Cards: \`$SERVICE_URL/api/creditcard\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Blazor UI:** [$SERVICE_URL]($SERVICE_URL)" >> $GITHUB_STEP_SUMMARY
