name: Deploy Full Stack Personal Info System to AWS App Runner

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY_API: personal-info-api
  ECR_REPOSITORY_BLAZOR: personal-info-blazor
  API_SERVICE_NAME: personal-info-api
  BLAZOR_SERVICE_NAME: personal-info-blazor
  API_PROJECT_PATH: src/PersonalInfoApi
  BLAZOR_PROJECT_PATH: src/PersonalInfoBlazor

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Create ECR repositories
        run: |
          # Create API repository
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY_API --region $AWS_REGION || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY_API --region $AWS_REGION
          
          # Create Blazor repository
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY_BLAZOR --region $AWS_REGION || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY_BLAZOR --region $AWS_REGION
          
          # Set repository policies to allow App Runner access
          ROLE_ARN="arn:aws:iam::486151888818:role/AppRunnerECRAccessRole2"
          
          # API repository policy
          aws ecr set-repository-policy \
            --repository-name $ECR_REPOSITORY_API \
            --region $AWS_REGION \
            --policy-text '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "AppRunnerAccess",
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": "'$ROLE_ARN'"
                  },
                  "Action": [
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage",
                    "ecr:BatchCheckLayerAvailability"
                  ]
                }
              ]
            }' || echo "API repository policy already set"
          
          # Blazor repository policy
          aws ecr set-repository-policy \
            --repository-name $ECR_REPOSITORY_BLAZOR \
            --region $AWS_REGION \
            --policy-text '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "AppRunnerAccess",
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": "'$ROLE_ARN'"
                  },
                  "Action": [
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage",
                    "ecr:BatchCheckLayerAvailability"
                  ]
                }
              ]
            }' || echo "Blazor repository policy already set"
      
      - name: Build and push API Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build and push API image
          docker build -f Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_API:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_API:latest
      
      - name: Build and push Blazor Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build and push Blazor image
          docker build -f Dockerfile.Blazor -t $ECR_REGISTRY/$ECR_REPOSITORY_BLAZOR:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BLAZOR:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_BLAZOR:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_BLAZOR:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BLAZOR:latest
      
      - name: Create deployment summary
        run: |
          echo "## ðŸš€ Docker Images Built and Pushed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“¦ Available Images" >> $GITHUB_STEP_SUMMARY
          echo "- **API Image:** \`$ECR_REGISTRY/$ECR_REPOSITORY_API:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Blazor Image:** \`$ECR_REGISTRY/$ECR_REPOSITORY_BLAZOR:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ”§ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Manually create/update your App Runner services using these images" >> $GITHUB_STEP_SUMMARY
          echo "2. Configure the Blazor service to connect to your API service URL" >> $GITHUB_STEP_SUMMARY
          echo "3. Set environment variables as needed" >> $GITHUB_STEP_SUMMARY
