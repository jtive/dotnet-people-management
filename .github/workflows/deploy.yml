name: Deploy Full Stack Personal Info System to AWS App Runner

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY_API: personal-info-api
  ECR_REPOSITORY_BLAZOR: personal-info-blazor
  API_SERVICE_NAME: personal-info-api
  BLAZOR_SERVICE_NAME: personal-info-blazor
  API_PROJECT_PATH: src/PersonalInfoApi
  BLAZOR_PROJECT_PATH: src/PersonalInfoBlazor

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Create ECR repositories
        run: |
          # Create API repository
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY_API --region $AWS_REGION || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY_API --region $AWS_REGION
          
          # Create Blazor repository
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY_BLAZOR --region $AWS_REGION || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY_BLAZOR --region $AWS_REGION
          
          # Set repository policies to allow App Runner access
          ROLE_ARN="arn:aws:iam::486151888818:role/AppRunnerECRAccessRole2"
          
          # API repository policy
          aws ecr set-repository-policy \
            --repository-name $ECR_REPOSITORY_API \
            --region $AWS_REGION \
            --policy-text '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "AppRunnerAccess",
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": "'$ROLE_ARN'"
                  },
                  "Action": [
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage",
                    "ecr:BatchCheckLayerAvailability"
                  ]
                }
              ]
            }' || echo "API repository policy already set"
          
          # Blazor repository policy
          aws ecr set-repository-policy \
            --repository-name $ECR_REPOSITORY_BLAZOR \
            --region $AWS_REGION \
            --policy-text '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "AppRunnerAccess",
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": "'$ROLE_ARN'"
                  },
                  "Action": [
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage",
                    "ecr:BatchCheckLayerAvailability"
                  ]
                }
              ]
            }' || echo "Blazor repository policy already set"
      
      - name: Build and push API Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build and push API image
          docker build -f Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_API:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_API:latest
      
      - name: Build and push Blazor Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build and push Blazor image
          docker build -f Dockerfile.Blazor -t $ECR_REGISTRY/$ECR_REPOSITORY_BLAZOR:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BLAZOR:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_BLAZOR:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_BLAZOR:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BLAZOR:latest
      
      - name: Create IAM role for App Runner
        run: |
          # Create trust policy for App Runner
          cat > trust-policy.json << 'EOF'
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "tasks.apprunner.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }
          EOF
          
          # Create the IAM role
          aws iam create-role \
            --role-name AppRunnerECRAccessRole2 \
            --assume-role-policy-document file://trust-policy.json || echo "Role already exists"
          
          # Attach the custom ECR access policy
          aws iam attach-role-policy \
            --role-name AppRunnerECRAccessRole2 \
            --policy-arn arn:aws:iam::486151888818:policy/AppRunnerECRPolicy || echo "Policy already attached"
          
          # Get the role ARN
          ROLE_ARN=$(aws iam get-role --role-name AppRunnerECRAccessRole2 --query 'Role.Arn' --output text)
          echo "App Runner role ARN: $ROLE_ARN"
          echo "ROLE_ARN=$ROLE_ARN" >> $GITHUB_ENV
          
          # Wait for IAM role to propagate (can take up to 60 seconds)
          echo "Waiting for IAM role to propagate..."
          sleep 30
      
      - name: Deploy API service
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Check if API service exists
          API_SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$API_SERVICE_NAME'].ServiceArn" --output text)
          
          if [ -z "$API_SERVICE_ARN" ]; then
            echo "Creating new API service..."
            API_SERVICE_ARN=$(aws apprunner create-service \
              --service-name "$API_SERVICE_NAME" \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "'$ECR_REGISTRY'/'$ECR_REPOSITORY_API':latest",
                  "ImageConfiguration": {
                    "Port": "8080",
                    "RuntimeEnvironmentVariables": {
                      "ASPNETCORE_ENVIRONMENT": "Production",
                      "ASPNETCORE_URLS": "http://+:8080"
                    }
                  },
                  "ImageRepositoryType": "ECR"
                },
                "AutoDeploymentsEnabled": true
              }' \
              --instance-configuration '{
                "Cpu": "0.25 vCPU",
                "Memory": "1 GB",
                "InstanceRoleArn": "'$ROLE_ARN'"
              }' \
              --query "Service.ServiceArn" \
              --output text)
            
            echo "Created API service with ARN: $API_SERVICE_ARN"
          else
            echo "API service exists, starting deployment update..."
            aws apprunner start-deployment --service-arn "$API_SERVICE_ARN"
          fi
          
          # Store API service ARN
          echo "API_SERVICE_ARN=$API_SERVICE_ARN" >> $GITHUB_ENV
      
      - name: Wait for API deployment to complete
        run: |
          echo "Waiting for API deployment to complete..."
          while true; do
            STATUS=$(aws apprunner describe-service --service-arn $API_SERVICE_ARN --query "Service.Status" --output text)
            OPERATION_STATUS=$(aws apprunner describe-service --service-arn $API_SERVICE_ARN --query "Service.OperationSummary.Status" --output text)
            
            echo "API Service Status: $STATUS, Operation Status: $OPERATION_STATUS"
            
            if [ "$STATUS" = "RUNNING" ] && ([ "$OPERATION_STATUS" = "SUCCEEDED" ] || [ "$OPERATION_STATUS" = "None" ]); then
              echo "✅ API deployment completed successfully!"
              break
            elif [ "$OPERATION_STATUS" = "FAILED" ]; then
              echo "❌ API deployment failed!"
              exit 1
            else
              echo "⏳ API deployment in progress, waiting 30 seconds..."
              sleep 30
            fi
          done
      
      - name: Get API service URL
        id: get-api-url
        run: |
          API_SERVICE_URL=$(aws apprunner describe-service --service-arn $API_SERVICE_ARN --query "Service.ServiceUrl" --output text)
          echo "api_url=$API_SERVICE_URL" >> $GITHUB_OUTPUT
          echo "🚀 API service deployed at: $API_SERVICE_URL"
      
      - name: Deploy Blazor service
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          API_SERVICE_URL: ${{ steps.get-api-url.outputs.api_url }}
        run: |
          # Check if Blazor service exists
          BLAZOR_SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$BLAZOR_SERVICE_NAME'].ServiceArn" --output text)
          
          if [ -z "$BLAZOR_SERVICE_ARN" ]; then
            echo "Creating new Blazor service..."
            BLAZOR_SERVICE_ARN=$(aws apprunner create-service \
              --service-name "$BLAZOR_SERVICE_NAME" \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "'$ECR_REGISTRY'/'$ECR_REPOSITORY_BLAZOR':latest",
                  "ImageConfiguration": {
                    "Port": "8080",
                    "RuntimeEnvironmentVariables": {
                      "ASPNETCORE_ENVIRONMENT": "Production",
                      "ASPNETCORE_URLS": "http://+:8080",
                      "ApiSettings__BaseUrl": "'$API_SERVICE_URL'"
                    }
                  },
                  "ImageRepositoryType": "ECR"
                },
                "AutoDeploymentsEnabled": true
              }' \
              --instance-configuration '{
                "Cpu": "0.25 vCPU",
                "Memory": "1 GB",
                "InstanceRoleArn": "'$ROLE_ARN'"
              }' \
              --query "Service.ServiceArn" \
              --output text)
            
            echo "Created Blazor service with ARN: $BLAZOR_SERVICE_ARN"
          else
            echo "Blazor service exists, starting deployment update..."
            aws apprunner start-deployment --service-arn "$BLAZOR_SERVICE_ARN"
          fi
          
          # Store Blazor service ARN
          echo "BLAZOR_SERVICE_ARN=$BLAZOR_SERVICE_ARN" >> $GITHUB_ENV
      
      - name: Wait for Blazor deployment to complete
        run: |
          echo "Waiting for Blazor deployment to complete..."
          while true; do
            STATUS=$(aws apprunner describe-service --service-arn $BLAZOR_SERVICE_ARN --query "Service.Status" --output text)
            OPERATION_STATUS=$(aws apprunner describe-service --service-arn $BLAZOR_SERVICE_ARN --query "Service.OperationSummary.Status" --output text)
            
            echo "Blazor Service Status: $STATUS, Operation Status: $OPERATION_STATUS"
            
            if [ "$STATUS" = "RUNNING" ] && ([ "$OPERATION_STATUS" = "SUCCEEDED" ] || [ "$OPERATION_STATUS" = "None" ]); then
              echo "✅ Blazor deployment completed successfully!"
              break
            elif [ "$OPERATION_STATUS" = "FAILED" ]; then
              echo "❌ Blazor deployment failed!"
              exit 1
            else
              echo "⏳ Blazor deployment in progress, waiting 30 seconds..."
              sleep 30
            fi
          done
      
      - name: Get Blazor service URL
        id: get-blazor-url
        run: |
          BLAZOR_SERVICE_URL=$(aws apprunner describe-service --service-arn $BLAZOR_SERVICE_ARN --query "Service.ServiceUrl" --output text)
          echo "blazor_url=$BLAZOR_SERVICE_URL" >> $GITHUB_OUTPUT
          echo "🚀 Blazor service deployed at: $BLAZOR_SERVICE_URL"
      
      - name: Test deployments
        run: |
          API_URL=${{ steps.get-api-url.outputs.api_url }}
          BLAZOR_URL=${{ steps.get-blazor-url.outputs.blazor_url }}
          
          echo "Testing API deployment at: $API_URL"
          echo "Testing Blazor deployment at: $BLAZOR_URL"
          
          # Wait a bit for services to be fully ready
          sleep 30
          
          # Test API health endpoint
          curl -f "$API_URL/api/health" || echo "⚠️ API health check failed"
          
          # Test Blazor main page
          curl -f "$BLAZOR_URL" || echo "⚠️ Blazor main page check failed"
      
      - name: Create deployment summary
        run: |
          API_URL=${{ steps.get-api-url.outputs.api_url }}
          BLAZOR_URL=${{ steps.get-blazor-url.outputs.blazor_url }}
          
          echo "## 🚀 Personal Info System Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Service URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Blazor UI:** [$BLAZOR_URL]($BLAZOR_URL)" >> $GITHUB_STEP_SUMMARY
          echo "- **API:** [$API_URL]($API_URL)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Available Endpoints" >> $GITHUB_STEP_SUMMARY
          echo "- Health Check: \`$API_URL/api/health\`" >> $GITHUB_STEP_SUMMARY
          echo "- Persons: \`$API_URL/api/person\`" >> $GITHUB_STEP_SUMMARY
          echo "- Addresses: \`$API_URL/api/address\`" >> $GITHUB_STEP_SUMMARY
          echo "- Credit Cards: \`$API_URL/api/creditcard\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Quick Access" >> $GITHUB_STEP_SUMMARY
          echo "**Start here:** [$BLAZOR_URL]($BLAZOR_URL) - Your Personal Info System UI" >> $GITHUB_STEP_SUMMARY
