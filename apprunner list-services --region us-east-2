[33mcommit 2a0c377f3a67084aa28a9f006808dd6e4a5e9e9b[m
Author: Jyten <Jyten@DESKTOP-RBAE6J0>
Date:   Mon Sep 22 11:36:52 2025 -0600

    manually deployed app runner and then added rate limiting

[1mdiff --git a/.github/workflows/deploy.yml b/.github/workflows/deploy.yml[m
[1mindex ef03a14..b1ef275 100644[m
[1m--- a/.github/workflows/deploy.yml[m
[1m+++ b/.github/workflows/deploy.yml[m
[36m@@ -112,218 +112,15 @@[m [mjobs:[m
           docker tag $ECR_REGISTRY/$ECR_REPOSITORY_BLAZOR:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_BLAZOR:latest[m
           docker push $ECR_REGISTRY/$ECR_REPOSITORY_BLAZOR:latest[m
       [m
[31m-      - name: Create IAM role for App Runner[m
[31m-        run: |[m
[31m-          # Create trust policy for App Runner[m
[31m-          cat > trust-policy.json << 'EOF'[m
[31m-          {[m
[31m-            "Version": "2012-10-17",[m
[31m-            "Statement": [[m
[31m-              {[m
[31m-                "Effect": "Allow",[m
[31m-                "Principal": {[m
[31m-                  "Service": "tasks.apprunner.amazonaws.com"[m
[31m-                },[m
[31m-                "Action": "sts:AssumeRole"[m
[31m-              }[m
[31m-            ][m
[31m-          }[m
[31m-          EOF[m
[31m-          [m
[31m-          # Create the IAM role[m
[31m-          aws iam create-role \[m
[31m-            --role-name AppRunnerECRAccessRole2 \[m
[31m-            --assume-role-policy-document file://trust-policy.json || echo "Role already exists"[m
[31m-          [m
[31m-          # Attach the custom ECR access policy[m
[31m-          aws iam attach-role-policy \[m
[31m-            --role-name AppRunnerECRAccessRole2 \[m
[31m-            --policy-arn arn:aws:iam::486151888818:policy/AppRunnerECRPolicy || echo "Policy already attached"[m
[31m-          [m
[31m-          # Get the role ARN[m
[31m-          ROLE_ARN=$(aws iam get-role --role-name AppRunnerECRAccessRole2 --query 'Role.Arn' --output text)[m
[31m-          echo "App Runner role ARN: $ROLE_ARN"[m
[31m-          echo "ROLE_ARN=$ROLE_ARN" >> $GITHUB_ENV[m
[31m-          [m
[31m-          # Wait for IAM role to propagate (can take up to 60 seconds)[m
[31m-          echo "Waiting for IAM role to propagate..."[m
[31m-          sleep 30[m
[31m-      [m
[31m-      - name: Deploy API service[m
[31m-        env:[m
[31m-          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}[m
[31m-        run: |[m
[31m-          # Check if API service exists[m
[31m-          API_SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$API_SERVICE_NAME'].ServiceArn" --output text)[m
[31m-          [m
[31m-          if [ -z "$API_SERVICE_ARN" ]; then[m
[31m-            echo "Creating new API service..."[m
[31m-            API_SERVICE_ARN=$(aws apprunner create-service \[m
[31m-              --service-name "$API_SERVICE_NAME" \[m
[31m-              --source-configuration '{[m
[31m-                "ImageRepository": {[m
[31m-                  "ImageIdentifier": "'$ECR_REGISTRY'/'$ECR_REPOSITORY_API':latest",[m
[31m-                  "ImageConfiguration": {[m
[31m-                    "Port": "8080",[m
[31m-                    "RuntimeEnvironmentVariables": {[m
[31m-                      "ASPNETCORE_ENVIRONMENT": "Production",[m
[31m-                      "ASPNETCORE_URLS": "http://+:8080"[m
[31m-                    }[m
[31m-                  },[m
[31m-                  "ImageRepositoryType": "ECR"[m
[31m-                },[m
[31m-                "AutoDeploymentsEnabled": true[m
[31m-              }' \[m
[31m-              --instance-configuration '{[m
[31m-                "Cpu": "0.25 vCPU",[m
[31m-                "Memory": "1 GB",[m
[31m-                "InstanceRoleArn": "'$ROLE_ARN'"[m
[31m-              }' \[m
[31m-              --query "Service.ServiceArn" \[m
[31m-              --output text)[m
[31m-            [m
[31m-            echo "Created API service with ARN: $API_SERVICE_ARN"[m
[31m-          else[m
[31m-            echo "API service exists, starting deployment update..."[m
[31m-            aws apprunner start-deployment --service-arn "$API_SERVICE_ARN"[m
[31m-          fi[m
[31m-          [m
[31m-          # Store API service ARN[m
[31m-          echo "API_SERVICE_ARN=$API_SERVICE_ARN" >> $GITHUB_ENV[m
[31m-      [m
[31m-      - name: Wait for API deployment to complete[m
[31m-        run: |[m
[31m-          echo "Waiting for API deployment to complete..."[m
[31m-          while true; do[m
[31m-            STATUS=$(aws apprunner describe-service --service-arn $API_SERVICE_ARN --query "Service.Status" --output text)[m
[31m-            OPERATION_STATUS=$(aws apprunner describe-service --service-arn $API_SERVICE_ARN --query "Service.OperationSummary.Status" --output text)[m
[31m-            [m
[31m-            echo "API Service Status: $STATUS, Operation Status: $OPERATION_STATUS"[m
[31m-            [m
[31m-            if [ "$STATUS" = "RUNNING" ] && ([ "$OPERATION_STATUS" = "SUCCEEDED" ] || [ "$OPERATION_STATUS" = "None" ]); then[m
[31m-              echo "✅ API deployment completed successfully!"[m
[31m-              break[m
[31m-            elif [ "$OPERATION_STATUS" = "FAILED" ]; then[m
[31m-              echo "❌ API deployment failed!"[m
[31m-              exit 1[m
[31m-            else[m
[31m-              echo "⏳ API deployment in progress, waiting 30 seconds..."[m
[31m-              sleep 30[m
[31m-            fi[m
[31m-          done[m
[31m-      [m
[31m-      - name: Get API service URL[m
[31m-        id: get-api-url[m
[31m-        run: |[m
[31m-          API_SERVICE_URL=$(aws apprunner describe-service --service-arn $API_SERVICE_ARN --query "Service.ServiceUrl" --output text)[m
[31m-          echo "api_url=$API_SERVICE_URL" >> $GITHUB_OUTPUT[m
[31m-          echo "🚀 API service deployed at: $API_SERVICE_URL"[m
[31m-      [m
[31m-      - name: Deploy Blazor service[m
[31m-        env:[m
[31m-          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}[m
[31m-          API_SERVICE_URL: ${{ steps.get-api-url.outputs.api_url }}[m
[31m-        run: |[m
[31m-          # Check if Blazor service exists[m
[31m-          BLAZOR_SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$BLAZOR_SERVICE_NAME'].ServiceArn" --output text)[m
[31m-          [m
[31m-          if [ -z "$BLAZOR_SERVICE_ARN" ]; then[m
[31m-            echo "Creating new Blazor service..."[m
[31m-            BLAZOR_SERVICE_ARN=$(aws apprunner create-service \[m
[31m-              --service-name "$BLAZOR_SERVICE_NAME" \[m
[31m-              --source-configuration '{[m
[31m-                "ImageRepository": {[m
[31m-                  "ImageIdentifier": "'$ECR_REGISTRY'/'$ECR_REPOSITORY_BLAZOR':latest",[m
[31m-                  "ImageConfiguration": {[m
[31m-                    "Port": "8080",[m
[31m-                    "RuntimeEnvironmentVariables": {[m
[31m-                      "ASPNETCORE_ENVIRONMENT": "Production",[m
[31m-                      "ASPNETCORE_URLS": "http://+:8080",[m
[31m-                      "ApiSettings__BaseUrl": "'$API_SERVICE_URL'"[m
[31m-                    }[m
[31m-                  },[m
[31m-                  "ImageRepositoryType": "ECR"[m
[31m-                },[m
[31m-                "AutoDeploymentsEnabled": true[m
[31m-              }' \[m
[31m-              --instance-configuration '{[m
[31m-                "Cpu": "0.25 vCPU",[m
[31m-                "Memory": "1 GB",[m
[31m-                "InstanceRoleArn": "'$ROLE_ARN'"[m
[31m-              }' \[m
[31m-              --query "Service.ServiceArn" \[m
[31m-              --output text)[m
[31m-            [m
[31m-            echo "Created Blazor service with ARN: $BLAZOR_SERVICE_ARN"[m
[31m-          else[m
[31m-            echo "Blazor service exists, starting deployment update..."[m
[31m-            aws apprunner start-deployment --service-arn "$BLAZOR_SE